const express = require('express')
const app = express()
app.use(express.json())
const path = require('path')
const {open} = require('sqlite')
const sqlite3 = require('sqlite3')
const dbPath = path.join(__dirname, 'cricketTeam.db')
let db = null

const initializeDBAndServer = async () => {
  try {
    db = await open({filename: dbPath, driver: sqlite3.Database})
    app.listen(3000, () => {
      console.log('Server Running at http://localhost:3000/')
    })
  } catch (e) {
    console.log(`DB Error : ${e.message}`)
    process.exit(1)
  }
}
initializeDBAndServer()

//GET
app.get('/players/', async (request, response) => {
  const getPlayersQuery = `SELECT * FROM cricket_team
  ORDER BY player_id`
  const playersArray = await db.all(getPlayersQuery)
  response.send(playersArray)
})

//POST

//add cricketer
// app.post('/players/', async (request, response) => {
//   const playerDetails = request.body
//   const {playerName, jerseyNumber, role} = playerDetails
//   const addPlayerQuery = `INSERT INTO cricket_team (player_id,player_name,jersey_number,role)
//   VALUES('${playerName}',

//   ${jerseyNumber},
//   ${role});`
//   const dbResponse = await db.run(addPlayerQuery)
//   const player_id = db.response.lastID
//   response.send('Player Added Successfully')
// })

app.post('/players/', async (request, response) => {
  const playerDetails = request.body
  const {playerName, jerseyNumber, role} = playerDetails

  const addPlayerQuery = `
      INSERT INTO cricket_team (player_name, jersey_number, role)
      VALUES (?, ?, ?)
    `

  const dbResponse = await db.run(
    addPlayerQuery,
    playerName,
    jerseyNumber,
    role,
  )
  const player_id = dbResponse.lastID

  response.send('Player Added to Team')
})

// app.get('/players/:playerId/', async (request, response) => {
//   const {playerId} = request.params
//   const getPlayerQuery = `
//     SELECT
//       *
//     FROM
//       cricket_team
//     WHERE
//       player_id = ${playerId}`
//   const player = await db.get(getPlayerQuery)
//   response.send(player)
// })
//GET
app.get('/players/:playerId/', async (request, response) => {
  const {playerId} = request.params

  // Construct the SQL query with a parameter placeholder
  const getPlayerQuery = `
    SELECT
      *
    FROM
      cricket_team
    WHERE
      player_id = ?`

  // Execute the query with the playerId as a parameter
  db.get(getPlayerQuery, [playerId], (err, player) => {
    if (err) {
      console.error(err.message)
      response.status(500).send('Internal Server Error')
      return
    }

    // If no player found with the given ID, return 404
    if (!player) {
      response.status(404).send('Player not found')
      return
    }

    // If player found, send the player details as a JSON response
    response.json(player)
  })
})
//PUT 
app.put('/players/:playerId/', async (request, response) => {
  try {
    const {playerId} = request.params
    const playerDetails = request.body
    const {playerName, jerseyNumber, role} = playerDetails

    const updatePlayerQuery = `
      UPDATE
        cricket_team
      SET
        player_name = ?,
        jersey_number = ?,
        role = ?
      WHERE
        player_id = ?
    `

    await db.run(updatePlayerQuery, playerName, jerseyNumber, role, playerId)

    response.send('Player Details Updated')
  } catch (error) {
    response.status(500).send('Error updating player: ' + error.message)
  }
})
// app.put('/players/:playerId/', async (request, response) => {
//   const {playerId} = request.params
//   const playerDetails = request.body
//   const {playerName, jerseyNumber, role} = playerDetails

//   const updatePlayerQuery = `
//     UPDATE
//       cricket_team
//     SET
//       player_name='${playerName}',
//       jersey_number=${jerseyNumber},
//       role='${role}'
//     WHERE
//       player_id = ${playerId};`

//   await db.run(updatePlayerQuery)
//   response.send('Player Details Updated')
// })

//DELETE

app.delete('/players/:playerId/', async (request, response) => {
  const {playerId} = request.params
  const deletePlayerQuery = `
    DELETE FROM
      cricket_team
    WHERE
      player_id = ${playerId};`
  await db.run(deletePlayerQuery)
  response.send('Player Removed')
})
module.exports = app
